// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SSMO.Data;

namespace SSMO.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231006071609_CostPriceCurrency")]
    partial class CostPriceCurrency
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BankDetailsCustomerOrder", b =>
                {
                    b.Property<int>("BankDetailsId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerOrdersId")
                        .HasColumnType("int");

                    b.HasKey("BankDetailsId", "CustomerOrdersId");

                    b.HasIndex("CustomerOrdersId");

                    b.ToTable("BankDetailsCustomerOrder");
                });

            modelBuilder.Entity("BankDetailsDocument", b =>
                {
                    b.Property<int>("BankDetailsId")
                        .HasColumnType("int");

                    b.Property<int>("DocumentsId")
                        .HasColumnType("int");

                    b.HasKey("BankDetailsId", "DocumentsId");

                    b.HasIndex("DocumentsId");

                    b.ToTable("BankDetailsDocument");
                });

            modelBuilder.Entity("CustomerOrderDocument", b =>
                {
                    b.Property<int>("CustomerOrdersId")
                        .HasColumnType("int");

                    b.Property<int>("DocumentsId")
                        .HasColumnType("int");

                    b.HasKey("CustomerOrdersId", "DocumentsId");

                    b.HasIndex("DocumentsId");

                    b.ToTable("CustomerOrderDocument");
                });

            modelBuilder.Entity("CustomerOrderProductDetailsDocument", b =>
                {
                    b.Property<int>("CustomerInvoicesId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerOrderProductsId")
                        .HasColumnType("int");

                    b.HasKey("CustomerInvoicesId", "CustomerOrderProductsId");

                    b.HasIndex("CustomerOrderProductsId");

                    b.ToTable("CustomerOrderProductDetailsDocument");
                });

            modelBuilder.Entity("CustomerOrderSupplierOrder", b =>
                {
                    b.Property<int>("CustomerOrdersId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierOrdersId")
                        .HasColumnType("int");

                    b.HasKey("CustomerOrdersId", "SupplierOrdersId");

                    b.HasIndex("SupplierOrdersId");

                    b.ToTable("CustomerOrderSupplierOrder");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SSMO.Data.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BgCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BgStreet")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bgcountry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("SSMO.Data.Models.BankDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("Iban")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.Property<string>("Swift")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("Iban")
                        .IsUnique()
                        .HasFilter("[Iban] IS NOT NULL");

                    b.HasIndex("SupplierId");

                    b.ToTable("BankDetails");
                });

            modelBuilder.Entity("SSMO.Data.Models.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("SSMO.Data.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("BgCustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BgCustomerRepresentativePerson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EIK")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RepresentativePerson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VAT")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("SSMO.Data.Models.CustomerOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 5)
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal>("Balance")
                        .HasPrecision(18, 5)
                        .HasColumnType("decimal(18,5)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerPoNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeliveryAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeliveryTerms")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FSCClaim")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FSCSertificate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("GrossWeight")
                        .HasPrecision(18, 3)
                        .HasColumnType("decimal(18,3)");

                    b.Property<string>("LoadingPlace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MyCompanyId")
                        .HasColumnType("int");

                    b.Property<decimal>("NetWeight")
                        .HasPrecision(18, 3)
                        .HasColumnType("decimal(18,3)");

                    b.Property<int>("OrderConfirmationNumber")
                        .HasColumnType("int");

                    b.Property<string>("Origin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PaidAmountStatus")
                        .HasColumnType("bit");

                    b.Property<decimal>("PaidAvance")
                        .HasPrecision(18, 5)
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<decimal>("SubTotal")
                        .HasPrecision(18, 5)
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(18, 5)
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("TotalPallets")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalQuantity")
                        .HasPrecision(18, 5)
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("TotalSheets")
                        .HasColumnType("int");

                    b.Property<int?>("Vat")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("MyCompanyId");

                    b.HasIndex("StatusId");

                    b.ToTable("CustomerOrders");
                });

            modelBuilder.Entity("SSMO.Data.Models.CustomerOrderProductDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("AutstandingQuantity")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("CustomerOrderId")
                        .HasColumnType("int");

                    b.Property<string>("FscCertificate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FscClaim")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Pallets")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(18, 5)
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal>("SellPrice")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("SheetsPerPallet")
                        .HasColumnType("int");

                    b.Property<int>("SupplierOrderId")
                        .HasColumnType("int");

                    b.Property<int>("TotalSheets")
                        .HasColumnType("int");

                    b.Property<int>("Unit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerOrderId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SupplierOrderId");

                    b.ToTable("CustomerOrderProductDetails");
                });

            modelBuilder.Entity("SSMO.Data.Models.Description", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BgName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Descriptions");
                });

            modelBuilder.Entity("SSMO.Data.Models.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Balance")
                        .HasPrecision(18, 5)
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal>("BankExpenses")
                        .HasPrecision(18, 5)
                        .HasColumnType("decimal(18,5)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CostPriceCurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("CreditNoteDeliveryAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("CreditNoteTotalAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreditToInvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreditToInvoiceId")
                        .HasColumnType("int");

                    b.Property<decimal>("CurrencyExchangeRateUsdToBGN")
                        .HasPrecision(18, 5)
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<decimal>("CustomsExpenses")
                        .HasPrecision(18, 5)
                        .HasColumnType("decimal(18,5)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DatePaidAmount")
                        .HasColumnType("datetime2");

                    b.Property<string>("DealDescriptionBg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DealDescriptionEng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DealTypeBg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DealTypeEng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DebitNoteTotalAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("DebitToInvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DebitToInvoiceId")
                        .HasColumnType("int");

                    b.Property<string>("DeliveryAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DeliveryTrasnportCost")
                        .HasPrecision(18, 5)
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("DocumentNumber")
                        .HasColumnType("int");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Duty")
                        .HasPrecision(18, 5)
                        .HasColumnType("decimal(18,5)");

                    b.Property<string>("Eta")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FSCClaim")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FSCSertificate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Factoring")
                        .HasPrecision(18, 5)
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal>("FiscalAgentExpenses")
                        .HasColumnType("decimal");

                    b.Property<int?>("FiscalAgentId")
                        .HasColumnType("int");

                    b.Property<decimal>("GrossWeight")
                        .HasColumnType("decimal");

                    b.Property<string>("Incoterms")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MyCompanyId")
                        .HasColumnType("int");

                    b.Property<decimal>("NetWeight")
                        .HasColumnType("decimal");

                    b.Property<decimal>("OtherExpenses")
                        .HasPrecision(18, 5)
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal>("PaidAvance")
                        .HasPrecision(18, 5)
                        .HasColumnType("decimal(18,5)");

                    b.Property<bool>("PaidStatus")
                        .HasColumnType("bit");

                    b.Property<decimal>("ProcentComission")
                        .HasPrecision(18, 5)
                        .HasColumnType("decimal(18,5)");

                    b.Property<string>("PurchaseNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PurchaseProductDetailsId")
                        .HasColumnType("int");

                    b.Property<decimal>("PurchaseTransportCost")
                        .HasPrecision(18, 5)
                        .HasColumnType("decimal(18,5)");

                    b.Property<string>("ShippingLine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.Property<int?>("SupplierOrderId")
                        .HasColumnType("int");

                    b.Property<string>("Swb")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalQuantity")
                        .HasPrecision(18, 5)
                        .HasColumnType("decimal(18,5)");

                    b.Property<string>("TruckNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Vat")
                        .HasColumnType("int");

                    b.Property<decimal?>("VatAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CostPriceCurrencyId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("FiscalAgentId");

                    b.HasIndex("MyCompanyId");

                    b.HasIndex("PurchaseProductDetailsId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("SupplierOrderId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("SSMO.Data.Models.FiscalAgent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BgDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BgName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FiscalAgents");
                });

            modelBuilder.Entity("SSMO.Data.Models.Grade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("SSMO.Data.Models.InvoiceProductDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 5)
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal>("BgAmount")
                        .HasPrecision(18, 5)
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal>("BgPrice")
                        .HasPrecision(18, 5)
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal>("CreditNoteBgAmount")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("CreditNoteBgPrice")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int?>("CreditNoteId")
                        .HasColumnType("int");

                    b.Property<int>("CreditNotePallets")
                        .HasColumnType("int");

                    b.Property<decimal>("CreditNotePrice")
                        .HasPrecision(18, 5)
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal>("CreditNoteProductAmount")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("CreditNoteQuantity")
                        .HasPrecision(18, 5)
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("CreditNoteSheetsPerPallet")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerOrderId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerOrderProductDetailsId")
                        .HasColumnType("int");

                    b.Property<decimal>("DebitNoteAmount")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("DebitNoteBgAmount")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("DebitNoteBgPrice")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int?>("DebitNoteId")
                        .HasColumnType("int");

                    b.Property<int>("DebitNotePallets")
                        .HasColumnType("int");

                    b.Property<decimal>("DebitNotePrice")
                        .HasPrecision(18, 5)
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal>("DebitNoteQuantity")
                        .HasPrecision(18, 5)
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("DebitNoteSheetsPerPallet")
                        .HasColumnType("int");

                    b.Property<decimal>("DeliveryCost")
                        .HasPrecision(18, 5)
                        .HasColumnType("decimal(18,5)");

                    b.Property<string>("FscCertificate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FscClaim")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<decimal>("InvoicedQuantity")
                        .HasPrecision(18, 5)
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("Pallets")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("Profit")
                        .HasPrecision(18, 5)
                        .HasColumnType("decimal(18,5)");

                    b.Property<int?>("PurchaseProductDetailsId")
                        .HasColumnType("int");

                    b.Property<decimal>("QuantityM3ForCalc")
                        .HasPrecision(18, 5)
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal>("SellPrice")
                        .HasPrecision(18, 5)
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("SheetsPerPallet")
                        .HasColumnType("int");

                    b.Property<int>("TotalSheets")
                        .HasColumnType("int");

                    b.Property<int>("Unit")
                        .HasColumnType("int");

                    b.Property<string>("VehicleNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreditNoteId");

                    b.HasIndex("CustomerOrderId");

                    b.HasIndex("CustomerOrderProductDetailsId");

                    b.HasIndex("DebitNoteId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseProductDetailsId");

                    b.ToTable("InvoiceProductDetails");
                });

            modelBuilder.Entity("SSMO.Data.Models.MyCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("BgName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BgRepresentativePerson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Eik")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("FSCClaim")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FSCSertificate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RepresentativePerson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VAT")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.ToTable("MyCompanies");
                });

            modelBuilder.Entity("SSMO.Data.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("CurruncyRateExchange")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<int?>("CustomerOrderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DocumentId")
                        .HasColumnType("int");

                    b.Property<string>("FirstCurrency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PaidAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SecondCurrency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SupplierOrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerOrderId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("SupplierOrderId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("SSMO.Data.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 5)
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal?>("BankExpenses")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("BgAmount")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("BgPrice")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("CostPrice")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int?>("CustomerOrderId")
                        .HasColumnType("int");

                    b.Property<decimal?>("CustomsExpenses")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal?>("DeliveryTrasnportCost")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("DescriptionId")
                        .HasColumnType("int");

                    b.Property<int?>("DocumentId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Duty")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal?>("Factoring")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal?>("FiscalAgentExpenses")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("FscClaim")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FscSertificate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GradeId")
                        .HasColumnType("int");

                    b.Property<decimal>("LoadedQuantityM3")
                        .HasPrecision(18, 5)
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal>("OrderedQuantity")
                        .HasPrecision(18, 5)
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal?>("OtherExpenses")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("Pallets")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 5)
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal?>("ProcentComission")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("PurchaseAmount")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("PurchaseFscCertificate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PurchaseFscClaim")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PurchasePrice")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal?>("PurchaseTransportCost")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("QuantityAvailableForCustomerOrder")
                        .HasPrecision(18, 5)
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal>("QuantityLeftForPurchaseLoading")
                        .HasPrecision(18, 5)
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal?>("QuantityM3")
                        .HasPrecision(18, 5)
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("SheetsPerPallet")
                        .HasColumnType("int");

                    b.Property<int>("SizeId")
                        .HasColumnType("int");

                    b.Property<decimal>("SoldQuantity")
                        .HasPrecision(18, 5)
                        .HasColumnType("decimal(18,5)");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.Property<int?>("SupplierOrderId")
                        .HasColumnType("int");

                    b.Property<int>("TotalSheets")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerOrderId");

                    b.HasIndex("DescriptionId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("GradeId");

                    b.HasIndex("SizeId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("SupplierOrderId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("SSMO.Data.Models.PurchaseProductDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("CostPrice")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("FscCertificate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FscClaim")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Pallets")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseInvoiceId")
                        .HasColumnType("int");

                    b.Property<decimal>("PurchasePrice")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(18, 5)
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal?>("QuantityM3")
                        .HasPrecision(18, 5)
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("SheetsPerPallet")
                        .HasColumnType("int");

                    b.Property<int>("SupplierOrderId")
                        .HasColumnType("int");

                    b.Property<int>("TotalSheets")
                        .HasColumnType("int");

                    b.Property<int>("Unit")
                        .HasColumnType("int");

                    b.Property<string>("VehicleNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseInvoiceId");

                    b.HasIndex("SupplierOrderId");

                    b.ToTable("PurchaseProductDetails");
                });

            modelBuilder.Entity("SSMO.Data.Models.ServiceOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AmountAfterVat")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Cost")
                        .HasPrecision(18, 5)
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("CustomerOrderId")
                        .HasColumnType("int");

                    b.Property<string>("DeliveryAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DocumentId")
                        .HasColumnType("int");

                    b.Property<string>("Eta")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Etd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LoadingAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Paid")
                        .HasColumnType("bit");

                    b.Property<int>("SupplierOrderId")
                        .HasColumnType("int");

                    b.Property<string>("TransportCompany")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TruckNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Vat")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerOrderId");

                    b.HasIndex("DocumentId")
                        .IsUnique();

                    b.HasIndex("SupplierOrderId");

                    b.ToTable("ServiceOrders");
                });

            modelBuilder.Entity("SSMO.Data.Models.Size", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sizes");
                });

            modelBuilder.Entity("SSMO.Data.Models.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("SSMO.Data.Models.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int?>("BankDetailId")
                        .HasColumnType("int");

                    b.Property<string>("Eik")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FSCClaim")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FSCSertificate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RepresentativePerson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VAT")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("BankDetailId");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("SSMO.Data.Models.SupplierOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 5)
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal>("Balance")
                        .HasPrecision(18, 5)
                        .HasColumnType("decimal(18,5)");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerOrderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("DatePaidAmount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeliveryAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeliveryTerms")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FscClaim")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FscSertificate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("GrossWeight")
                        .HasPrecision(18, 3)
                        .HasColumnType("decimal(18,3)");

                    b.Property<string>("LoadingAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MyCompanyId")
                        .HasColumnType("int");

                    b.Property<decimal>("NetWeight")
                        .HasPrecision(18, 3)
                        .HasColumnType("decimal(18,3)");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PaidAvance")
                        .HasPrecision(18, 5)
                        .HasColumnType("decimal(18,5)");

                    b.Property<bool>("PaidStatus")
                        .HasColumnType("bit");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalQuantity")
                        .HasPrecision(18, 5)
                        .HasColumnType("decimal(18,5)");

                    b.Property<int?>("VAT")
                        .HasColumnType("int");

                    b.Property<decimal?>("VatAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("MyCompanyId");

                    b.HasIndex("StatusId");

                    b.HasIndex("SupplierId");

                    b.ToTable("SupplierOrders");
                });

            modelBuilder.Entity("BankDetailsCustomerOrder", b =>
                {
                    b.HasOne("SSMO.Data.Models.BankDetails", null)
                        .WithMany()
                        .HasForeignKey("BankDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SSMO.Data.Models.CustomerOrder", null)
                        .WithMany()
                        .HasForeignKey("CustomerOrdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BankDetailsDocument", b =>
                {
                    b.HasOne("SSMO.Data.Models.BankDetails", null)
                        .WithMany()
                        .HasForeignKey("BankDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SSMO.Data.Models.Document", null)
                        .WithMany()
                        .HasForeignKey("DocumentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CustomerOrderDocument", b =>
                {
                    b.HasOne("SSMO.Data.Models.CustomerOrder", null)
                        .WithMany()
                        .HasForeignKey("CustomerOrdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SSMO.Data.Models.Document", null)
                        .WithMany()
                        .HasForeignKey("DocumentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CustomerOrderProductDetailsDocument", b =>
                {
                    b.HasOne("SSMO.Data.Models.Document", null)
                        .WithMany()
                        .HasForeignKey("CustomerInvoicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SSMO.Data.Models.CustomerOrderProductDetails", null)
                        .WithMany()
                        .HasForeignKey("CustomerOrderProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CustomerOrderSupplierOrder", b =>
                {
                    b.HasOne("SSMO.Data.Models.CustomerOrder", null)
                        .WithMany()
                        .HasForeignKey("CustomerOrdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SSMO.Data.Models.SupplierOrder", null)
                        .WithMany()
                        .HasForeignKey("SupplierOrdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SSMO.Data.Models.BankDetails", b =>
                {
                    b.HasOne("SSMO.Data.Models.MyCompany", "Company")
                        .WithMany("BankDetails")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SSMO.Data.Models.Currency", "Currency")
                        .WithMany("BankDetails")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SSMO.Data.Models.Supplier", null)
                        .WithMany("BankDetails")
                        .HasForeignKey("SupplierId");

                    b.Navigation("Company");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("SSMO.Data.Models.Customer", b =>
                {
                    b.HasOne("SSMO.Data.Models.Address", "Address")
                        .WithOne("Customers")
                        .HasForeignKey("SSMO.Data.Models.Customer", "AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("SSMO.Data.Models.CustomerOrder", b =>
                {
                    b.HasOne("SSMO.Data.Models.Currency", "Currency")
                        .WithMany("CustomerOrders")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SSMO.Data.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SSMO.Data.Models.MyCompany", "MyCompany")
                        .WithMany("Orders")
                        .HasForeignKey("MyCompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SSMO.Data.Models.Status", "Status")
                        .WithMany("CustomerOrders")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("Customer");

                    b.Navigation("MyCompany");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("SSMO.Data.Models.CustomerOrderProductDetails", b =>
                {
                    b.HasOne("SSMO.Data.Models.CustomerOrder", "CustomerOrder")
                        .WithMany("CustomerOrderProducts")
                        .HasForeignKey("CustomerOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SSMO.Data.Models.Product", "Product")
                        .WithMany("CustomerOrderProductDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SSMO.Data.Models.SupplierOrder", "SupplierOrder")
                        .WithMany("CustomerOrderProductDetails")
                        .HasForeignKey("SupplierOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerOrder");

                    b.Navigation("Product");

                    b.Navigation("SupplierOrder");
                });

            modelBuilder.Entity("SSMO.Data.Models.Document", b =>
                {
                    b.HasOne("SSMO.Data.Models.Currency", "CostPriceCurrency")
                        .WithMany("DocumentsNewCurrencyForCostPrice")
                        .HasForeignKey("CostPriceCurrencyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SSMO.Data.Models.Currency", "Currency")
                        .WithMany("Documents")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SSMO.Data.Models.Customer", "Customer")
                        .WithMany("Invoices")
                        .HasForeignKey("CustomerId");

                    b.HasOne("SSMO.Data.Models.FiscalAgent", "Fiscalagent")
                        .WithMany("Documents")
                        .HasForeignKey("FiscalAgentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SSMO.Data.Models.MyCompany", "MyCompany")
                        .WithMany("Documents")
                        .HasForeignKey("MyCompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SSMO.Data.Models.PurchaseProductDetails", null)
                        .WithMany("InvoicesToCustomer")
                        .HasForeignKey("PurchaseProductDetailsId");

                    b.HasOne("SSMO.Data.Models.Supplier", "Supplier")
                        .WithMany("Documents")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SSMO.Data.Models.SupplierOrder", "SupplierOrder")
                        .WithMany("Documents")
                        .HasForeignKey("SupplierOrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CostPriceCurrency");

                    b.Navigation("Currency");

                    b.Navigation("Customer");

                    b.Navigation("Fiscalagent");

                    b.Navigation("MyCompany");

                    b.Navigation("Supplier");

                    b.Navigation("SupplierOrder");
                });

            modelBuilder.Entity("SSMO.Data.Models.InvoiceProductDetails", b =>
                {
                    b.HasOne("SSMO.Data.Models.Document", "CreditNote")
                        .WithMany("CreditNoteProducts")
                        .HasForeignKey("CreditNoteId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SSMO.Data.Models.CustomerOrder", "CustomerOrder")
                        .WithMany("InvoiceProductDetails")
                        .HasForeignKey("CustomerOrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SSMO.Data.Models.CustomerOrderProductDetails", "CustomerOrderProductDetails")
                        .WithMany("InvoiceProductDetails")
                        .HasForeignKey("CustomerOrderProductDetailsId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SSMO.Data.Models.Document", "DebitNote")
                        .WithMany("DebitNoteProducts")
                        .HasForeignKey("DebitNoteId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SSMO.Data.Models.Document", "Invoice")
                        .WithMany("InvoiceProducts")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SSMO.Data.Models.Product", "Product")
                        .WithMany("InvoiceProductDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SSMO.Data.Models.PurchaseProductDetails", "PurchaseProductDetails")
                        .WithMany("InvoiceProductDetails")
                        .HasForeignKey("PurchaseProductDetailsId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreditNote");

                    b.Navigation("CustomerOrder");

                    b.Navigation("CustomerOrderProductDetails");

                    b.Navigation("DebitNote");

                    b.Navigation("Invoice");

                    b.Navigation("Product");

                    b.Navigation("PurchaseProductDetails");
                });

            modelBuilder.Entity("SSMO.Data.Models.MyCompany", b =>
                {
                    b.HasOne("SSMO.Data.Models.Address", "Address")
                        .WithOne("MyCompany")
                        .HasForeignKey("SSMO.Data.Models.MyCompany", "AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("SSMO.Data.Models.Payment", b =>
                {
                    b.HasOne("SSMO.Data.Models.CustomerOrder", "CustomerOrder")
                        .WithMany("Payments")
                        .HasForeignKey("CustomerOrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SSMO.Data.Models.Document", "Document")
                        .WithMany("Payments")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SSMO.Data.Models.SupplierOrder", "SupplierOrder")
                        .WithMany("Payments")
                        .HasForeignKey("SupplierOrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CustomerOrder");

                    b.Navigation("Document");

                    b.Navigation("SupplierOrder");
                });

            modelBuilder.Entity("SSMO.Data.Models.Product", b =>
                {
                    b.HasOne("SSMO.Data.Models.CustomerOrder", "CustomerOrder")
                        .WithMany()
                        .HasForeignKey("CustomerOrderId");

                    b.HasOne("SSMO.Data.Models.Description", "Description")
                        .WithMany("Products")
                        .HasForeignKey("DescriptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SSMO.Data.Models.Document", "Document")
                        .WithMany("CreditAndDebitNoteProducts")
                        .HasForeignKey("DocumentId");

                    b.HasOne("SSMO.Data.Models.Grade", "Grade")
                        .WithMany("Products")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SSMO.Data.Models.Size", "Size")
                        .WithMany("Products")
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SSMO.Data.Models.Supplier", null)
                        .WithMany("Products")
                        .HasForeignKey("SupplierId");

                    b.HasOne("SSMO.Data.Models.SupplierOrder", "SupplierOrder")
                        .WithMany("Products")
                        .HasForeignKey("SupplierOrderId");

                    b.Navigation("CustomerOrder");

                    b.Navigation("Description");

                    b.Navigation("Document");

                    b.Navigation("Grade");

                    b.Navigation("Size");

                    b.Navigation("SupplierOrder");
                });

            modelBuilder.Entity("SSMO.Data.Models.PurchaseProductDetails", b =>
                {
                    b.HasOne("SSMO.Data.Models.Product", "Product")
                        .WithMany("PurchaseProductDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SSMO.Data.Models.Document", "PurchaseInvoice")
                        .WithMany("PurchaseProducts")
                        .HasForeignKey("PurchaseInvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SSMO.Data.Models.SupplierOrder", "SupplierOrder")
                        .WithMany("PurchaseProductDetails")
                        .HasForeignKey("SupplierOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("PurchaseInvoice");

                    b.Navigation("SupplierOrder");
                });

            modelBuilder.Entity("SSMO.Data.Models.ServiceOrder", b =>
                {
                    b.HasOne("SSMO.Data.Models.CustomerOrder", "CustomerOrder")
                        .WithMany()
                        .HasForeignKey("CustomerOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SSMO.Data.Models.Document", "Document")
                        .WithOne("ServiceOrder")
                        .HasForeignKey("SSMO.Data.Models.ServiceOrder", "DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SSMO.Data.Models.SupplierOrder", "SupplierOrder")
                        .WithMany()
                        .HasForeignKey("SupplierOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerOrder");

                    b.Navigation("Document");

                    b.Navigation("SupplierOrder");
                });

            modelBuilder.Entity("SSMO.Data.Models.Supplier", b =>
                {
                    b.HasOne("SSMO.Data.Models.Address", "Address")
                        .WithOne("Suppliers")
                        .HasForeignKey("SSMO.Data.Models.Supplier", "AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SSMO.Data.Models.BankDetails", "BankDetail")
                        .WithMany()
                        .HasForeignKey("BankDetailId");

                    b.Navigation("Address");

                    b.Navigation("BankDetail");
                });

            modelBuilder.Entity("SSMO.Data.Models.SupplierOrder", b =>
                {
                    b.HasOne("SSMO.Data.Models.Currency", "Currency")
                        .WithMany("SupplierOrders")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SSMO.Data.Models.MyCompany", "MyCompany")
                        .WithMany("SupplierOrders")
                        .HasForeignKey("MyCompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SSMO.Data.Models.Status", "Status")
                        .WithMany("SupplierOrders")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SSMO.Data.Models.Supplier", "Supplier")
                        .WithMany("SupplierOrders")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("MyCompany");

                    b.Navigation("Status");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("SSMO.Data.Models.Address", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("MyCompany");

                    b.Navigation("Suppliers");
                });

            modelBuilder.Entity("SSMO.Data.Models.Currency", b =>
                {
                    b.Navigation("BankDetails");

                    b.Navigation("CustomerOrders");

                    b.Navigation("Documents");

                    b.Navigation("DocumentsNewCurrencyForCostPrice");

                    b.Navigation("SupplierOrders");
                });

            modelBuilder.Entity("SSMO.Data.Models.Customer", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("SSMO.Data.Models.CustomerOrder", b =>
                {
                    b.Navigation("CustomerOrderProducts");

                    b.Navigation("InvoiceProductDetails");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("SSMO.Data.Models.CustomerOrderProductDetails", b =>
                {
                    b.Navigation("InvoiceProductDetails");
                });

            modelBuilder.Entity("SSMO.Data.Models.Description", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("SSMO.Data.Models.Document", b =>
                {
                    b.Navigation("CreditAndDebitNoteProducts");

                    b.Navigation("CreditNoteProducts");

                    b.Navigation("DebitNoteProducts");

                    b.Navigation("InvoiceProducts");

                    b.Navigation("Payments");

                    b.Navigation("PurchaseProducts");

                    b.Navigation("ServiceOrder");
                });

            modelBuilder.Entity("SSMO.Data.Models.FiscalAgent", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("SSMO.Data.Models.Grade", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("SSMO.Data.Models.MyCompany", b =>
                {
                    b.Navigation("BankDetails");

                    b.Navigation("Documents");

                    b.Navigation("Orders");

                    b.Navigation("SupplierOrders");
                });

            modelBuilder.Entity("SSMO.Data.Models.Product", b =>
                {
                    b.Navigation("CustomerOrderProductDetails");

                    b.Navigation("InvoiceProductDetails");

                    b.Navigation("PurchaseProductDetails");
                });

            modelBuilder.Entity("SSMO.Data.Models.PurchaseProductDetails", b =>
                {
                    b.Navigation("InvoiceProductDetails");

                    b.Navigation("InvoicesToCustomer");
                });

            modelBuilder.Entity("SSMO.Data.Models.Size", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("SSMO.Data.Models.Status", b =>
                {
                    b.Navigation("CustomerOrders");

                    b.Navigation("SupplierOrders");
                });

            modelBuilder.Entity("SSMO.Data.Models.Supplier", b =>
                {
                    b.Navigation("BankDetails");

                    b.Navigation("Documents");

                    b.Navigation("Products");

                    b.Navigation("SupplierOrders");
                });

            modelBuilder.Entity("SSMO.Data.Models.SupplierOrder", b =>
                {
                    b.Navigation("CustomerOrderProductDetails");

                    b.Navigation("Documents");

                    b.Navigation("Payments");

                    b.Navigation("Products");

                    b.Navigation("PurchaseProductDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
